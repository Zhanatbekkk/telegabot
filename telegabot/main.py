import logging
import requests
import pytz
import httpx
from datetime import datetime, time, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from telegram.request import HTTPXRequest

# üîê –û—Ç–∫–ª—é—á–∞–µ–º SSL-–ø—Ä–æ–≤–µ—Ä–∫—É (–µ—Å–ª–∏ –Ω–∞ Render –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
httpx_client = httpx.AsyncClient(verify=False)
request = HTTPXRequest(client=httpx_client)

# ‚úÖ –¢–í–û–ò –î–ê–ù–ù–´–ï
TOKEN = "7566959944:AAEK4jEofM1z7T5JMoK5kYmzTzX_WCY0OCI"  # ‚Üê –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHAT_ID = 6259223196  # ‚Üê –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π chat_id

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç —Å –ù–∞—Ü–±–∞–Ω–∫–∞
def get_currency():
    today = datetime.now(pytz.timezone("Asia/Almaty")).strftime("%d.%m.%Y")
    url = "https://nationalbank.kz/rss/rates_all.xml"
    try:
        response = requests.get(url, timeout=5)
        xml = response.text
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ù–∞—Ü–±–∞–Ω–∫—É:\n{e}"

    def extract(tag):
        try:
            start = xml.index(f"<title>{tag}</title>")
            desc_start = xml.index("<description>", start) + 13
            desc_end = xml.index("</description>", desc_start)
            return xml[desc_start:desc_end]
        except ValueError:
            return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    usd = extract("USD")
    eur = extract("EUR")
    rub = extract("RUB")

    return f"üìÖ –ö—É—Ä—Å –Ω–∞ {today} (–ê—Å—Ç–∞–Ω–∞):\nüá∫üá∏ USD: {usd} ‚Ç∏\nüá™üá∫ EUR: {eur} ‚Ç∏\nüá∑üá∫ RUB: {rub} ‚Ç∏"


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å", callback_data="get_rate")]]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = get_currency()
    await query.edit_message_text(text=text)


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞
async def send_morning_rate(context: ContextTypes.DEFAULT_TYPE):
    text = get_currency()
    await context.bot.send_message(chat_id=CHAT_ID, text=text)


# –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–æ 8:00 –ø–æ –ê—Å—Ç–∞–Ω–µ
def get_seconds_until_8_astana():
    tz = pytz.timezone("Asia/Almaty")
    now = datetime.now(tz)
    target = tz.localize(datetime.combine(now.date(), time(8, 0)))
    if now > target:
        target += timedelta(days=1)
    return (target - now).total_seconds()


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).request(request).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –≤ 8:00 –ø–æ –ê—Å—Ç–∞–Ω–µ
    seconds = get_seconds_until_8_astana()
    app.job_queue.run_repeating(send_morning_rate, interval=86400, first=seconds)

    await app.initialize()
    await app.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.updater.start_polling()
    await asyncio.Event().wait()


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
